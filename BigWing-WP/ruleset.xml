<?xml version="1.0"?>
<ruleset name="BigWing-WP"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">

	<description>BigWing's PHP coding standards for WordPress projects.</description>

	<arg name="extensions" value="php"/>
	<!-- Show sniff codes in all reports, and progress when running -->
	<arg value="sp"/>
	<!-- Strip the filepaths down to the relevant bit. -->
	<arg name="basepath" value="./"/>
	<!-- Enables parallel processing when available for faster results. -->
	<arg name="parallel" value="8"/>

	<exclude-pattern>*/phpunit.xml*</exclude-pattern>
	<exclude-pattern>*/languages/*</exclude-pattern>
	<exclude-pattern>*/tests/*</exclude-pattern>

	<!-- Third-party code -->
	<exclude-pattern>*/bower-components/*</exclude-pattern>
	<exclude-pattern>*/node_modules/*</exclude-pattern>
	<exclude-pattern>*/vendor/*</exclude-pattern>

	<!-- Production-ready files -->
	<exclude-pattern>*/build/*</exclude-pattern>
	<exclude-pattern>*/dist/*</exclude-pattern>

	<!-- Ensure certain file types aren't sniffed -->
	<exclude-pattern>*\.(s?(a|p?c)ss|jsx?)</exclude-pattern>

	<!-- Don't worry about files that don't contain any code -->
	<rule ref="Internal.NoCodeFound">
		<severity>0</severity>
	</rule>

	<!-- Ignore mixed line-endings warnings -->
	<rule ref="Internal.LineEndings.Mixed">
		<severity>0</severity>
	</rule>

	<!-- Internal exceptions (often occur on minified files) -->
	<rule ref="Internal.Tokenizer.Exception">
		<severity>0</severity>
	</rule>

	<!-- For CI, don't fail on warnings -->
	<config name="ignore_warnings_on_exit" value="1"/>

	<!-- Enforce doc standards -->
	<rule ref="WordPress-Docs">
		<!-- Don't worry about capitalizing long lines -->
		<exclude name="Generic.Commenting.DocComment.LongNotCapital"/>

		<!-- Don't need to capitalize first letter -->
		<exclude name="Generic.Commenting.DocComment.ShortNotCapital"/>
	</rule>

	<rule ref="WordPress-Extra">
		<!-- Forget about file names -->
		<exclude name="WordPress.Files.FileName"/>

		<!-- Allow same line control structures e.g. if ( true ) { echo 1; } -->
		<exclude name="Squiz.ControlStructures.ControlSignature.NewlineAfterOpenBrace"/>

		<!-- Don't require punctuation after inline comments -->
		<exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>

		<!-- Allow empty catch statements -->
		<exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/>

		<!-- Comment punctuation doesn't matter -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
		<exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/>

		<!-- Allow WP global modification -->
		<exclude name="WordPress.WP.GlobalVariablesOverride.Prohibited"/>

		<!-- This nonce sniff almost never works right -->
		<exclude name="WordPress.Security.NonceVerification.Missing"/>
	</rule>

	<!-- Sets the minimum supported WP version to 5.0, which is when Gutenberg was introduced. -->
	<config name="minimum_supported_wp_version" value="5.0" />

	<!-- Make missing translator comment a warning. -->
	<rule ref="WordPress.WP.I18n.MissingTranslatorsComment">
		<type>warning</type>
	</rule>

	<!-- Sometimes we need to override globals -->
	<rule ref="WordPress.WP.GlobalVariablesOverride.OverrideProhibited">
		<type>warning</type>
	</rule>

	<!-- Allow reading local file info without making a remote request. -->
	<rule ref="WordPress.WP.AlternativeFunctions">
		<properties>
			<property name="exclude" type="array">
				<element value="file_get_contents"/>
			</property>
		</properties>
	</rule>

	<!-- Allow null to be passed when enqueuing CSS & JS. -->
	<rule ref="WordPress.WP.EnqueuedResourceParameters">
		<exclude name="WordPress.WP.EnqueuedResourceParameters.MissingVersion"/>
	</rule>

	<!-- Add several extra word delimiters. -->
	<rule ref="WordPress.NamingConventions.ValidHookName">
		<properties>
			<property name="additionalWordDelimiters" value="/"/>
		</properties>
	</rule>

	<!-- Set "bigwing" as the base prefix for global functions, variables, and namespaces. -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<!-- Add extend="true" to the local ruleset to append, otherwise it overwrites. -->
			<property name="prefixes" type="array">
				<element value="bigwing"/>
			</property>
		</properties>
	</rule>

	<!-- Set a default textdomain. Should be modified on a per-project basis. -->
	<rule ref="WordPress.WP.I18n">
		<properties>
			<!-- Add extend="true" to the local ruleset to append, otherwise it overwrites. -->
			<property name="text_domain" type="array">
				<element value="bigwing"/>
			</property>
		</properties>
	</rule>

	<!-- This is hardly used, but shown here as an example of how to indicate functions
	 that output without having to run them through esc_* functions. -->
	<rule ref="WordPress.Security.EscapeOutput">
		<properties>
			<property name="customAutoEscapedFunctions" type="array">
				<element value="bigwing_display"/>
			</property>
		</properties>
	</rule>

	<!-- Loads the PHP Compatibility ruleset. -->
	<rule ref="PHPCompatibilityWP" />

	<!-- PHP version check. Some older sites still need to run 7.2. -->
	<config name="testVersion" value="7.2-"/>
</ruleset>
